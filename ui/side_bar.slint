// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: MIT

import { StyleMetrics } from "std-widgets.slint";
import { ComboBox, Button } from "std-widgets.slint";

component SideBarItem inherits Rectangle {
    in property <bool> selected;
    in property <bool> has-focus;
    in-out property <string> text <=> label.text;

    callback clicked <=> touch.clicked;

    min-height: l.preferred-height;

    states [
        pressed when touch.pressed : {
            state.opacity: 0.8;
        }
        hover when touch.has-hover : {
            state.opacity: 0.6;
        }
        selected when root.selected : {
            state.opacity: 1;
        }
        focused when root.has-focus : {
            state.opacity: 0.8;
        }
    ]

    state := Rectangle {
        opacity: 0;
        background: StyleMetrics.window-background;

        animate opacity { duration: 150ms; }
    }

    l := HorizontalLayout {
        y: (parent.height - self.height) / 2;
        padding: StyleMetrics.layout-padding;
        spacing: 0px;

        label := Text {
            color: StyleMetrics.default-text-color;
            vertical-alignment: center;
         }
    }

    touch := TouchArea {
        width: 100%;
        height: 100%;
    }
}

export component SideBar inherits Rectangle {
    in property <[string]> port_select: [];
    in property <bool> port_connected: false;

    callback on_print_selection(string);

    in property <[string]> model: [];
    in property <string> title <=> label.text;
    out property <int> current-item: 0;
    out property <int> current-focused: fs.has-focus ? fs.focused-tab : -1; // The currently focused tab
    in property <string> selected_port;

    forward-focus: fs;
    accessible-role: tab;
    accessible-delegate-focus: root.current-focused >= 0 ? root.current-focused : root.current-item;

    Rectangle {
        background: StyleMetrics.window-background.darker(0.2);

        fs := FocusScope {
            key-pressed(event) => {
                if (event.text == "\n") {
                     root.current-item = root.current-focused;
                     return accept;
                }
                if (event.text == Key.UpArrow) {
                     self.focused-tab = Math.max(self.focused-tab - 1,  0);
                     return accept;
                }
                if (event.text == Key.DownArrow) {
                     self.focused-tab = Math.min(self.focused-tab + 1, root.model.length - 1);
                     return accept;
                }
                return reject;
            }

            key-released(event) => {
                if (event.text == " ") {
                     root.current-item = root.current-focused;
                     return accept;
                }
                return reject;
            }

            property <int> focused-tab: 0;

            x: 0;
            width: 0; // Do not react on clicks
        }
    }

    VerticalLayout {
        padding-top: StyleMetrics.layout-padding;
        padding-bottom: StyleMetrics.layout-padding;
        spacing: StyleMetrics.layout-spacing;
        alignment: start;

        // Title
        label := Text {
            font-size: 20px;
            horizontal-alignment: center;
        }

        Rectangle {
            width: parent.width;
            height: 2px;
            background: #000000;
        }

        // Title
        Text {
            font-size: 14px;
            horizontal-alignment: center;
            text: "Select CANdapter";
        }

        GridLayout {
            spacing: 5px;
            Row{
                HorizontalLayout {
                    alignment: center;
                    // Connect To Candapter
                    PortSelectComboBox:= ComboBox {
                        model: root.port_select;
                        width: 90%;
                        selected => {root.selected-port}
                        // Items can be dynamically populated in Rust
                    }
                }
            }
            Row {
                HorizontalLayout {
                     alignment: center;
                     Rectangle {
                        height: 6px;
                        width: 70%;
                        if port-connected : Rectangle { background: #00FF44; }
                        if !port-connected: Rectangle { background: #EE0000; }
                        }
                }
            }

            Row {
            HorizontalLayout {
                    alignment: center;
                    // Refresh Button
                    Button {
                        text: "Refresh";
                        clicked => { /* Rust callback for refresh */ }
                    }
                    Rectangle {
                        width: 5%;
                    }

                    // Connect Button
                    Button {
                        text: "Connect";
                        clicked => { root.on_print_selection(PortSelectComboBox.current-value); }
                    }
                }
            }
        }

        Rectangle {
            width: parent.width;
            height: 2px;
            background: #000000;
        }

        navigation := VerticalLayout {
            alignment: start;
            vertical-stretch: 0;
            for item[index] in root.model : SideBarItem {
                clicked => { root.current-item = index; }

                has-focus: index == root.current-focused;
                text: item;
                selected: index == root.current-item;
            }
        }

        VerticalLayout {
            bottom := VerticalLayout {
                padding-left: StyleMetrics.layout-padding;
                padding-right: StyleMetrics.layout-padding;

                @children
             }
        }
    }
}
